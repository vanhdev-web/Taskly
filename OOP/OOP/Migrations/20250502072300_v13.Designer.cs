// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Taskly.Models;

#nullable disable

namespace Taskly.Migrations
{
    [DbContext(typeof(TaskManagementDBContext))]
    [Migration("20250502072300_v13")]
    partial class v13
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("Taskly.Models.ActivityLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Details")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ObjectId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ObjectType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ActivityLog");
                });

            modelBuilder.Entity("Taskly.Models.Meeting", b =>
                {
                    b.Property<int>("taskID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssignedTo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Hour")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ProjectID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("deadline")
                        .HasColumnType("TEXT");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("taskName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar")
                        .HasColumnName("TaskName");

                    b.HasKey("taskID");

                    b.HasIndex("AssignedTo");

                    b.HasIndex("ProjectID");

                    b.ToTable("Meetings", (string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("Taskly.Models.MeetingMemberManagement", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MeetingID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("MeetingID");

                    b.HasIndex("UserID");

                    b.ToTable("MeetingMemberManagement");
                });

            modelBuilder.Entity("Taskly.Models.Milestone", b =>
                {
                    b.Property<int>("taskID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssignedTo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ProjectID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("deadline")
                        .HasColumnType("TEXT");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("taskName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar")
                        .HasColumnName("TaskName");

                    b.HasKey("taskID");

                    b.HasIndex("AssignedTo");

                    b.HasIndex("ProjectID");

                    b.ToTable("Milestones", (string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("Taskly.Models.MilestoneMemberManagement", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MilestoneID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("MilestoneID");

                    b.HasIndex("UserID");

                    b.ToTable("MilestoneMemberManagement");
                });

            modelBuilder.Entity("Taskly.Models.Project", b =>
                {
                    b.Property<int>("projectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AdminID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("projectDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("projectName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Project Name");

                    b.HasKey("projectID");

                    b.HasIndex("AdminID");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Taskly.Models.Task", b =>
                {
                    b.Property<int>("taskID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssignedTo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("deadline")
                        .HasColumnType("TEXT");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("taskName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar")
                        .HasColumnName("TaskName");

                    b.HasKey("taskID");

                    b.HasIndex("AssignedTo");

                    b.HasIndex("ProjectID");

                    b.ToTable("Tasks", (string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("Taskly.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Avatar")
                        .HasColumnType("BLOB");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar")
                        .HasColumnName("User Name");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Taskly.Models.ActivityLog", b =>
                {
                    b.HasOne("Taskly.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Taskly.Models.Meeting", b =>
                {
                    b.HasOne("Taskly.Models.User", "UserAssignedTo")
                        .WithMany()
                        .HasForeignKey("AssignedTo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Taskly.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("UserAssignedTo");
                });

            modelBuilder.Entity("Taskly.Models.MeetingMemberManagement", b =>
                {
                    b.HasOne("Taskly.Models.Meeting", "Meeting")
                        .WithMany("MeetingUsers")
                        .HasForeignKey("MeetingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Taskly.Models.User", "User")
                        .WithMany("MeetingUsers")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meeting");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Taskly.Models.Milestone", b =>
                {
                    b.HasOne("Taskly.Models.User", "UserAssignedTo")
                        .WithMany()
                        .HasForeignKey("AssignedTo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Taskly.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("UserAssignedTo");
                });

            modelBuilder.Entity("Taskly.Models.MilestoneMemberManagement", b =>
                {
                    b.HasOne("Taskly.Models.Milestone", "Milestone")
                        .WithMany("MilestoneUsers")
                        .HasForeignKey("MilestoneID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Taskly.Models.User", "User")
                        .WithMany("MilestoneUsers")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Milestone");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Taskly.Models.Project", b =>
                {
                    b.HasOne("Taskly.Models.User", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("Taskly.Models.Task", b =>
                {
                    b.HasOne("Taskly.Models.User", "UserAssignedTo")
                        .WithMany("Tasks")
                        .HasForeignKey("AssignedTo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Taskly.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("UserAssignedTo");
                });

            modelBuilder.Entity("Taskly.Models.Meeting", b =>
                {
                    b.Navigation("MeetingUsers");
                });

            modelBuilder.Entity("Taskly.Models.Milestone", b =>
                {
                    b.Navigation("MilestoneUsers");
                });

            modelBuilder.Entity("Taskly.Models.User", b =>
                {
                    b.Navigation("MeetingUsers");

                    b.Navigation("MilestoneUsers");

                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
